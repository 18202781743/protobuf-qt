syntax = "proto2";

enum TestEnum
{
    TE_V1 = 1;
    TE_V2 = 2;
}

message TestRequired
{
    required double v_double = 1;
    required float v_float = 2;
    required int32 v_int32 = 3;
    required int64 v_int64 = 4;
    required uint32 v_uint32 = 5;
    required uint64 v_uint64 = 6;
    required bool v_bool = 7;
    required string v_string = 8;
    required TestEnum v_enum = 9;
}

message TestOptional
{
    optional double v_double = 1;
    optional float v_float = 2;
    optional int32 v_int32 = 3;
    optional int64 v_int64 = 4;
    optional uint32 v_uint32 = 5;
    optional uint64 v_uint64 = 6;
    optional bool v_bool = 7;
    optional string v_string = 8;
    optional TestEnum v_enum = 9;
}

message TestOneOf
{
    oneof value
    {
        double v_double = 1;
        float v_float = 2;
        int32 v_int32 = 3;
        int64 v_int64 = 4;
        uint32 v_uint32 = 5;
        uint64 v_uint64 = 6;
        bool v_bool = 7;
        string v_string = 8;
        TestEnum v_enum = 9;
    }
}

message TestDefault
{
    required double v_double = 1   [default = 999];
    required float v_float = 2     [default = 999];
    required int32 v_int32 = 3     [default = 999];
    required int64 v_int64 = 4     [default = 999];
    required uint32 v_uint32 = 5   [default = 999];
    required uint64 v_uint64 = 6   [default = 999];
    required bool v_bool = 7       [default = true];
    required string v_string = 8   [default = "999"];
    required TestEnum v_enum = 9   [default = TE_V2];
}

message TestRepeatedMessages
{
    repeated TestRequired req = 1;
    repeated TestOptional opt = 2;
}

message TestRepeatedPrimitives
{
    repeated double v_double = 1;
    repeated float v_float = 2;
    repeated int32 v_int32 = 3;
    repeated int64 v_int64 = 4;
    repeated uint32 v_uint32 = 5;
    repeated uint64 v_uint64 = 6;
    repeated bool v_bool = 7;
    repeated string v_string = 8;
    repeated TestEnum v_enum = 9;
}

message TestNested
{
    message Nested1 {
        message Nested2 {
            message Nested3 {
                required double v_double = 1;
            }
            required Nested3 v_nested3 = 1;
        }
        required Nested2 v_nested2 = 1;
    }
    required Nested1 v_nested1 = 1;
}

